//implementation of a Sudoku game using the Pygame library in Python



//Initializes the Pygame font module.

pygame.font.init()


////////////////////////////////////////////////////////////////////////////////// CLASS GRID
class Grid:
    board = [
        [7, 8, 0, 4, 0, 0, 1, 2, 0],
        [6, 0, 0, 0, 7, 5, 0, 0, 9],
        [0, 0, 0, 6, 0, 1, 0, 7, 8],
        [0, 0, 7, 0, 4, 0, 2, 6, 0],
        [0, 0, 1, 0, 5, 0, 9, 3, 0],
        [9, 0, 4, 0, 6, 0, 0, 0, 5],
        [0, 7, 0, 3, 0, 0, 0, 1, 2],
        [1, 2, 0, 0, 0, 7, 4, 0, 0],
        [0, 4, 9, 2, 0, 6, 0, 0, 7]
    ]// you can update your sudoku here;  zeros represent the empty cells here

    def __init__(self, rows, cols, width, height, win): //the constructor for the Grid class. It initializes an instance of the class.
        self.rows = rows
        self.cols = cols
        self.cubes = [[Cube(self.board[i][j], i, j, width, height) for j in range(cols)] for i in range(rows)]
        //setting the cubes with i,j being their position and width height being their dimensions.
        self.width = width
        self.height = height
        self.model = None 
        self.update_model() // resetting the model to its initial grid condition
        self.selected = None // initially there is no cube selected
        self.win = win

  

    def update_model(self):
        self.model = [[self.cubes[i][j].value for j in range(self.cols)] for i in range(self.rows)] 
        // creating a 2d list by extracing values from current cubes list.
        // iterating over columns and rows

    def place(self, val): // placing a value in the selected cell
        row, col = self.selected
        if self.cubes[row][col].value == 0://only proceed if selected cell is emplty
            self.cubes[row][col].set(val)
            self.update_model()// we gotto update the model with this new addition

            if valid(self.model, val, (row,col)) and self.solve():// checking if placemwnt is valid and solvable
                return True
            else:
                self.cubes[row][col].set(0)
                self.cubes[row][col].set_temp(0)
                self.update_model() // if not valid we gotta restore the original zeros in the cells
                return False

    def sketch(self, val):
        row, col = self.selected
        self.cubes[row][col].set_temp(val) // sets the temporary value to the selected cell

    def draw(self):
        # Drawing the  Grid Lines
        gap = self.width / 9
        for i in range(self.rows+1):
            if i % 3 == 0 and i != 0:
                thick = 4
            else:
                thick = 1 //for lines separating 3*3 cubes thickness is 4 else its 3 
            pygame.draw.line(self.win, (0,0,0), (0, i*gap), (self.width, i*gap), thick)
            pygame.draw.line(self.win, (0, 0, 0), (i * gap, 0), (i * gap, self.height), thick)
            //drawing the columns and row

        # Draw Cubes
        for i in range(self.rows):
            for j in range(self.cols):
                self.cubes[i][j].draw(self.win)
        // drawing the cubes 

    def select(self, row, col):
        # Reset all other
        for i in range(self.rows):
            for j in range(self.cols):
                self.cubes[i][j].selected = False
                // setting the selected attribute to false for each cell

        self.cubes[row][col].selected = True
                // setting the selected attribute of only the selected cell to true
        self.selected = (row, col)
                // updating the slected variable with row and column of selected cell

    def clear(self):
        row, col = self.selected
        if self.cubes[row][col].value == 0:
            self.cubes[row][col].set_temp(0)
            //It checks if the value of the selected cell is already 0
            //If true, it calls the set_temp method of the selected Cube object to set the temporary value to 0.

    def click(self, pos):
         // to determine which cell is clicked based on the mouse position.
         //It takes the mouse position (pos) as input.
        if pos[0] < self.width and pos[1] < self.height:
            gap = self.width / 9
            x = pos[0] // gap
            y = pos[1] // gap
            return (int(y),int(x))
        else:
            return None

    def is_finished(self):
        for i in range(self.rows):
            for j in range(self.cols):
                if self.cubes[i][j].value == 0:
                    return False
        return True
        //If it completes the iteration without finding any empty cell, it indicates that the puzzle is finished.

    def solve(self):
        find = find_empty(self.model)
        if not find:
            return True
        else:
            row, col = find

        for i in range(1, 10):
            if valid(self.model, i, (row, col)):
                self.model[row][col] = i

                if self.solve():
                    return True

                self.model[row][col] = 0

        return False
        //If the placement is valid, it updates proceeds to solve recursively (self.solve()).
        //If the recursive solve is successful, it returns True.
        //If the recursive solve is not successful, it backtracks by setting the current cell 
        //value to 0 and continues with the next number.

    def solve_gui(self):
        self.update_model()
        find = find_empty(self.model)
        if not find:
            return True
        else:
            row, col = find
        // updating the model and finding an empty cell.
        for i in range(1, 10):
            if valid(self.model, i, (row, col)):
                self.model[row][col] = i
                self.cubes[row][col].set(i)
                self.cubes[row][col].draw_change(self.win, True)
                self.update_model()
                pygame.display.update()
                pygame.time.delay(100)
                //If the placement is valid, it updates the model, sets the value of the corresponding Cube object, and draws the change in the GUI 
                //proceeds to solve recursively
                if self.solve_gui():
                    return True

                self.model[row][col] = 0
                self.cubes[row][col].set(0)
                self.update_model()
                self.cubes[row][col].draw_change(self.win, False)
                pygame.display.update()
                pygame.time.delay(100)//delay
                //If the recursive solve is not successful, it backtracks by setting the current cell value to 0, 
                 //resetting the Cube value, updating the GUI
        return False

////////////////////////////////////////////////////////////////////////////////////////////// CLASS CUBE
class Cube:
    rows = 9
    cols = 9

    def __init__(self, value, row, col, width, height): //constructor
        self.value = value//actual value of the cell
        self.temp = 0 //temporary value
        self.row = row
        self.col = col //stores row and column
        self.width = width
        self.height = height //stores width and height
        self.selected = False //stores info if selected

    def draw(self, win):
        fnt = pygame.font.SysFont("comicsans", 40) //create a font object (fnt) with a size of 40.
 
        gap = self.width / 9
        x = self.col * gap
        y = self.row * gap //Calculates the position (x and y) of the cube

        if self.temp != 0 and self.value == 0:
            text = fnt.render(str(self.temp), 1, (128,128,128))
            win.blit(text, (x+5, y+5)) //If the cube has a temporary value and is empty, it renders and displays the temporary value in gray.
        elif not(self.value == 0):
            text = fnt.render(str(self.value), 1, (0, 0, 0))
            win.blit(text, (x + (gap/2 - text.get_width()/2), y + (gap/2 - text.get_height()/2)))
            I//f the cube has an actual value, it renders and displays the value in black.
        if self.selected:
            pygame.draw.rect(win, (255,0,0), (x,y, gap ,gap), 3)
            // if a cell is selected it draws a red rectangle around it
    def draw_change(self, win, g=True)://to visually represent changes in the cube, during the solution process.
        fnt = pygame.font.SysFont("comicsans", 40)

        gap = self.width / 9
        x = self.col * gap
        y = self.row * gap
        //It calculates the position (x and y) of the cube based on its row and column indices.

        pygame.draw.rect(win, (255, 255, 255), (x, y, gap, gap), 0)
        //Draws a white rectangle to erase the previous content of the cube.
        

        text = fnt.render(str(self.value), 1, (0, 0, 0))
        win.blit(text, (x + (gap / 2 - text.get_width() / 2), y + (gap / 2 - text.get_height() / 2)))
        //Renders and displays the value of the cube in black.
        if g:
            pygame.draw.rect(win, (0, 255, 0), (x, y, gap, gap), 3)
        else:
            pygame.draw.rect(win, (255, 0, 0), (x, y, gap, gap), 3)
        //If g is True, it draws a green rectangle around the cube. If g is False, it draws a red rectangle.

    def set(self, val):
        self.value = val //sets actual value of a cell to given value

    def set_temp(self, val):
        self.temp = val //sets temporary value of cell to given value

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
def find_empty(bo)://to find the first empty cell in the Sudoku board.
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i, j)  # row, col

    return None


def valid(bo, num, pos)://if placing a number in a given position on the Sudoku board is a valid move
    # Check row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x * 3, box_x*3 + 3):
            if bo[i][j] == num and (i,j) != pos:
                return False

    return True


def redraw_window(win, board, time, strikes):// for redrawing the game window.
    win.fill((255,255,255))//white background
    # Draw time
    fnt = pygame.font.SysFont("comicsans", 40)
    text = fnt.render("Time: " + format_time(time), 1, (0,0,0))
    win.blit(text, (540 - 160, 560))
    # Draw Strikes x for wrong attemps
    text = fnt.render("X " * strikes, 1, (255, 0, 0))
    win.blit(text, (20, 560))
    board.draw()// to draw the Sudoku grid on the window.


def format_time(secs):
    sec = secs%60
    minute = secs//60
    hour = minute//60
    //takes the elapsed time in seconds (secs) and formats it into a string representing minutes and seconds.
    mat = " " + str(minute) + ":" + str(sec)
    return mat
    // creating string of minutes and seconds and returning

def main():
    win = pygame.display.set_mode((540,600))
    pygame.display.set_caption("Sudoku")//creates the game window title sudoku
    board = Grid(9, 9, 540, 540, win)//creates an instance of the Grid class
    key = None //This variable will be used to store the numeric key pressed by the player.
    run = True //to control the main game loop.
    start = time.time()//records the current time using and stores it in the variable start.
    strikes = 0 //to keep track of the number of mistakes made by the player.
    while run:

        play_time = round(time.time() - start)
        //calculates the elapsed play time by subtracting the start time from the current time using 
        for event in pygame.event.get()://iterates through the list of pygame events that have occurred since the last iteration of the loop.
            if event.type == pygame.QUIT:
                run = False//if the player closed the game window
            if event.type == pygame.KEYDOWN://if a key on the keyboard has been pressed
                if event.key == pygame.K_1:
                    key = 1
                if event.key == pygame.K_2:
                    key = 2
                if event.key == pygame.K_3:
                    key = 3
                if event.key == pygame.K_4:
                    key = 4
                if event.key == pygame.K_5:
                    key = 5
                if event.key == pygame.K_6:
                    key = 6
                if event.key == pygame.K_7:
                    key = 7
                if event.key == pygame.K_8:
                    key = 8
                if event.key == pygame.K_9:
                    key = 9
                if event.key == pygame.K_KP1:
                    key = 1
                if event.key == pygame.K_KP2:
                    key = 2
                if event.key == pygame.K_KP3:
                    key = 3
                if event.key == pygame.K_KP4:
                    key = 4
                if event.key == pygame.K_KP5:
                    key = 5
                if event.key == pygame.K_KP6:
                    key = 6
                if event.key == pygame.K_KP7:
                    key = 7
                if event.key == pygame.K_KP8:
                    key = 8
                if event.key == pygame.K_KP9:
                    key = 9
                if event.key == pygame.K_DELETE:
                    board.clear()
                    key = None
                //If the Delete key is pressed, the clear method of the board object is called to clear the selected cell.
                if event.key == pygame.K_SPACE:
                    board.solve_gui()
                // if space key is pressed sove sudoku command
                if event.key == pygame.K_RETURN:
                    i, j = board.selected
                    if board.cubes[i][j].temp != 0:
                        if board.place(board.cubes[i][j].temp):
                            print("Success")
                        else:
                            print("Wrong")
                            strikes += 1
                        key = None

                        if board.is_finished():
                            print("Game over")

            if event.type == pygame.MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                clicked = board.click(pos)
                if clicked:
                    board.select(clicked[0], clicked[1])
                    key = None
                // If a valid cell is clicked, it selects that cell using the select method of the board object.
        if board.selected and key != None:
            board.sketch(key)
            //If both conditions are true, it sketches the selected cell with the numeric value
        redraw_window(win, board, play_time, strikes)
        pygame.display.update()


main()
pygame.quit()